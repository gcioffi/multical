#!/usr/bin/env python

import argparse
import signal

from kalibr_sensor_calibration import *

# make numpy print prettier
np.set_printoptions(suppress=True)


def signal_exit(signal, frame):
    print
    sm.logWarn("Shutting down! (CTRL+C)")
    sys.exit(1)


# helper to constrain certain arguments to be specified only once
class Once(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if getattr(namespace, self.dest) is not None:
            msg = '{o} can only be specified once'.format(o=option_string)
            raise argparse.ArgumentError(None, msg)
        setattr(namespace, self.dest, values)


def parseArgs():
    class KalibrArgParser(argparse.ArgumentParser):
        def error(self, message):
            self.print_help()
            sm.logError('%s' % message)
            sys.exit(2)

        def format_help(self):
            formatter = self._get_formatter()
            formatter.add_text(self.description)
            formatter.add_usage(self.usage, self._actions,
                                self._mutually_exclusive_groups)
            for action_group in self._action_groups:
                formatter.start_section(action_group.title)
                formatter.add_text(action_group.description)
                formatter.add_arguments(action_group._group_actions)
                formatter.end_section()
            formatter.add_text(self.epilog)
            return formatter.format_help()

    usage = """
    Example usage to calibrate a camera-LiDAR-IMU sensor suite
    using multiple aprilgrid boards.
    Temporal calibration is enabled by default.
    
    multical_calibrate_sensors --bag MYROSBAG.bag --cams camchain.yaml --lidars lidar.yaml(optional)  \\
             --imus imu.yaml(optional) --target aprilgrid.yaml
    
    camchain.yaml: is the config file including the intrinsic model
    and parameters, and initial extrinsic parameters are optional.
    
    lidar.yaml stores the information about one or more LiDARs
    example lidars.yaml: 
        lidar0:
          rostopic: /right_velodyne/velodyne_points
          T_here_cam0:
          - [0.0, 0.0, 1.0, 0.15]
          - [-1.0, 0.0, 0.0, 0.21]
          - [0.0, -1.0, 0.0, -0.1]
          - [0.0, 0.0, 0.0, 1.0]
          relative_point_timestamp: True
          reserved_points_per_frame: 500
    
    example aprilgrid.yaml:       |  example imus.yaml: (ADIS16448)
        target_type: 'aprilgrid'  |      accelerometer_noise_density: 0.006 
        numberTargets: 6          |      accelerometer_random_walk: 0.0002
        tagCols: 6                |      gyroscope_noise_density: 0.0004
        tagRows: 6                |      gyroscope_random_walk: 4.0e-06
        tagSize: 0.088            |      update_rate: 200.0
        tagSpacing: 0.3           |      rostopic: /xsens_imu/data """

    # setup the argument list
    parser = KalibrArgParser(description='Calibrate the spatial and temporal '
                                         'parameters of multimodal sensors',
                             usage=usage)

    # data source
    groupData = parser.add_argument_group('Dataset source')
    groupData.add_argument('--bag', dest='bagfile', nargs=1,
                           help='Ros bag file containing sensors\' data (rostopics specified in the yamls)',
                           action=Once, required=True)
    groupData.add_argument('--bag-from-to', metavar='bag_from_to', type=float,
                           nargs=2,
                           help='Use the bag data starting from up to this time [s]')
    groupData.add_argument('--perform-synchronization', action='store_true',
                           dest='perform_synchronization', \
                           help='Perform a clock synchronization according to \'Clock synchronization algorithms for network measurements\' by Zhang et al. (2002).')

    # configuration files
    groupCam = parser.add_argument_group('Camera system configuration')
    groupCam.add_argument('--cams', dest='chain_yaml',
                          help='Camera system configuration as yaml file',
                          action=Once)
    groupCam.add_argument('--reprojection-sigma', type=float, default=1.0,
                          dest='reprojection_sigma',
                          help='Standard deviation of the distribution of reprojected corner points [px]. (default: %(default)s)',
                          required=False)

    groupImu = parser.add_argument_group('IMU configuration')
    groupImu.add_argument('--imus', dest='imu_yaml',
                          help='Yaml files holding the IMU noise parameters.',
                          required=False, action=Once)
    groupImu.add_argument('--imu-delay-by-correlation', action='store_true',
                          dest='estimate_imu_delay', \
                          help='Estimate the delay between multiple IMUs by correlation. By default, no temporal calibration between IMUs will be performed.',
                          required=False)
    groupImu.add_argument('--static-bias', action='store_true',
                          dest='static_bias', \
                          help='Use static variables to represent gyroscope and accelerometer bias',
                          required=False)

    groupTarget = parser.add_argument_group('Calibration target')
    groupTarget.add_argument('--targets', dest='target_yaml',
                             help='Calibration target configuration as yaml file',
                             required=True, action=Once)

    # LiDAR options
    groupLiDAR = parser.add_argument_group('LiDAR configuration')
    groupTarget.add_argument('--lidars', dest='lidar_yaml',
                             help='LiDAR configuration as yaml file',
                             required=False, action=Once)

    # optimization options
    groupOpt = parser.add_argument_group('Optimization options')
    groupOpt.add_argument('--no-time-calibration', action='store_true',
                          dest='no_time',
                          help='Disable the temporal calibration',
                          required=False)
    groupOpt.add_argument('--max-iter', type=int, default=30, dest='max_iter',
                          help='Max. iterations (default: %(default)s)',
                          required=False)
    groupOpt.add_argument('--recover-covariance', action='store_true',
                          dest='recover_cov',
                          help='Recover the covariance of the design variables.',
                          required=False)
    groupOpt.add_argument('--timeoffset-padding', type=float, default=30.e-3,
                          dest='timeoffset_padding',
                          help='Maximum range in which the timeoffset may change during estimation [s] (default: %(default)s)',
                          required=False)

    # Result options
    outputSettings = parser.add_argument_group('Output options')
    outputSettings.add_argument('--show-point-cloud', action='store_true',
                                dest='showpointcloud',
                                help='show all points in world frame')
    outputSettings.add_argument('--show-extraction', action='store_true',
                                dest='showextraction',
                                help='Show the calibration target extraction. (disables plots)')
    outputSettings.add_argument('--extraction-stepping', action='store_true',
                                dest='extractionstepping',
                                help='Show each image during calibration target extraction  (disables plots)',
                                required=False)
    outputSettings.add_argument('--verbose', action='store_true',
                                dest='verbose',
                                help='Verbose output (disables plots)')
    outputSettings.add_argument('--dont-show-report', action='store_true',
                                dest='dontShowReport',
                                help='Do not show the report on screen after calibration.')

    # print help if no argument is specified
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(2)

    # Parser the argument list
    try:
        parsed = parser.parse_args()
    except:
        sys.exit(2)

    if parsed.verbose:
        parsed.showextraction = True

        # there is a with the gtk plot widget, so we cant plot if we have opencv windows open...
    # --> disable the plots in these special situations
    if parsed.showextraction or parsed.extractionstepping or parsed.verbose:
        parsed.dontShowReport = True

    return parsed


def main():
    # Parse the arguments
    parsed = parseArgs();

    # logging modess
    if parsed.verbose:
        sm.setLoggingLevel(sm.LoggingLevel.Debug)
    else:
        sm.setLoggingLevel(sm.LoggingLevel.Info)

    signal.signal(signal.SIGINT, signal_exit)


    if parsed.imu_yaml:
        is_camera_reference = False
        reference_sensor_name = "imu0"
    else:
        is_camera_reference = True
        reference_sensor_name = "cam0"

    # create a calibrator instance
    iCal = Calibrator(reference_sensor_name)

    has_imu = False
    if parsed.imu_yaml:
        print("Initializing IMUs:")

        imus = list()
        imu_config_list = kc.ImuSetParameters(parsed.imu_yaml,
                                              reference_sensor_name)
        for i in range(imu_config_list.numImus()):
            imu_config = imu_config_list.getImuParameters(i)
            imu_config.printDetails()
            imu_model = imu_config.getModel()
            is_imu_reference = not imus and not is_camera_reference
            if imu_model == 'calibrated':
                imus.append(sens.Imu(imu_config, parsed, is_imu_reference,
                                     parsed.estimate_imu_delay))
            elif imu_model == 'scale-misalignment':
                imus.append(
                    sens.ScaledMisalignedImu(imu_config, parsed,
                                             is_imu_reference,
                                             parsed.estimate_imu_delay))
            elif imu_model == 'scale-misalignment-size-effect':
                imus.append(
                    sens.ScaledMisalignedSizeEffectImu(imu_config, parsed,
                                                       is_imu_reference,
                                                       parsed.estimate_imu_delay))
            else:
                sm.logError(
                    "Model {0} is currently unsupported.".format(imu_model))
                sys.exit(2)

        for imu in imus:
            iCal.registerImu(imu)
            if imu is not imus[0]:
                imu.findOrientationPrior(imus[0])

        has_imu = True

    # load calibration target configuration
    targetConfig = kc.CalibrationTargetParameters(parsed.target_yaml)
    print("Initializing calibration target:")
    targetConfig.printDetails()

    grid = sens.initCalibrationTarget(targetConfig,
                                      showExtraction=parsed.showextraction)
    targets = [sens.CalibrationTarget(grid[0]) for _ in range(grid[1])]

    iCal.registerCalibrationTarget(targets)

    has_lidar = False
    if parsed.lidar_yaml:
        LiDARConfig = kc.LiDARListParameters(parsed.lidar_yaml,
                                             reference_sensor_name)
        for idx in range(0, LiDARConfig.numLiDARs()):
            config = LiDARConfig.getLiDARParameters(idx)
            lidar = sens.LiDAR(config, parsed, targets)
            iCal.registerLiDAR(lidar)

        has_lidar = True

    print("Initializing camera chain:")
    chain = kc.CameraChainParameters(parsed.chain_yaml, reference_sensor_name)
    chain.printDetails()
    camChain = sens.CameraChain(chain, targets, parsed, is_camera_reference)

    # register sensors with calibrator
    iCal.registerCamChain(camChain)

    print()
    print("Building the problem")
    iCal.buildProblem(splineOrder=6,
                      poseKnotsPerSecond=100,
                      biasKnotsPerSecond=5,
                      doPoseMotionError=not has_imu,
                      mrTranslationVariance=1e6,
                      mrRotationVariance=1e6,
                      doBiasMotionError=True,
                      blakeZisserCam=-1,
                      huberAccel=-1,
                      huberGyro=-1,
                      noTimeCalibration=parsed.no_time,
                      maxIterations=parsed.max_iter,
                      timeOffsetPadding=parsed.timeoffset_padding,
                      verbose=parsed.verbose)

    print()
    print("Before Optimization")
    print("===================")
    util.printErrorStatistics(iCal)

    print()
    print("Optimizing...")
    iCal.optimize(maxIterations=parsed.max_iter, recoverCov=parsed.recover_cov)

    print()
    print("After Optimization (Results)")
    print("==================")
    util.printErrorStatistics(iCal)
    util.printResults(iCal, withCov=parsed.recover_cov)

    if parsed.showpointcloud:
        for idx, lidar in enumerate(iCal.LiDARList):
            _, points = lidar.transformMeasurementsToWorldFrame(iCal.poseDv)
            util.showPointCloud([points.T], window_name="lidar%d" % idx)

    print()
    tag = "calibration_results-"
    tag += parsed.chain_yaml.translate(None, "<>:/\|?*").replace('.yaml', '', 1)
    tag += '-'
    if has_imu:
        tag += parsed.imu_yaml.translate(None, "<>:/\|?*").replace('.yaml', '',
                                                                   1)
        tag += '-'
    if parsed.lidar_yaml:
        tag += parsed.lidar_yaml.translate(None, "<>:/\|?*").replace('.yaml',
                                                                     '', 1)
        tag += '-'
    tag += parsed.bagfile[0].translate(None, "<>:/\|?*").replace('.bag', '', 1)

    cam_result_file_name = tag + "-cams.yaml"
    iCal.saveCamChainParametersYaml(cam_result_file_name)
    print("  Saving camera chain calibration to file: %s".format() % cam_result_file_name)

    if has_imu:
        print()
        cam_result_file_name = tag + "-imus.yaml"
        iCal.saveImuSetParametersYaml(cam_result_file_name)
        print("  Saving imu calibration to file: {0}".format() % cam_result_file_name)

    if has_lidar:
        print()
        lidar_result_file_name = tag + "-lidars.yaml"
        iCal.saveLiDARsParametersYaml(lidar_result_file_name)
        print("  Saving LiDARs calibration to file: {0}".format() % lidar_result_file_name)

    resultFileTxt = tag + ".txt"
    util.saveResultTxt(iCal, filename=resultFileTxt)
    print( "  Detailed results written to file: {0}".format(resultFileTxt))

    print( "Generating result report...")
    reportFile = "report-" + tag + ".pdf"
    util.generateReport(iCal, filename=reportFile,
                        showOnScreen=not parsed.dontShowReport)
    print( "  Report written to {0}".format(reportFile))
    print()


if __name__ == "__main__":
    main()
#     try:
#         main()
#     except Exception,e:
#         sm.logError("Exception: {0}".format(e))
#         sys.exit(-1)
